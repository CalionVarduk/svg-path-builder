import { SqMatrix } from '../../core/primitives/sq-matrix';
import each from 'jest-each';

each([
    [{ t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 1, t1: 0, b0: 1, b1: 0 }],
    [{ t0: 0, t1: 1, b0: 0, b1: 1 }],
    [{ t0: -1, t1: 0, b0: 0, b1: -1 }],
    [{ t0: 0, t1: -1, b0: 0, b1: 1 }],
    [{ t0: 2, t1: 0, b0: 1, b1: 0 }],
    [{ t0: 0, t1: 2, b0: 0, b1: 1 }],
    [{ t0: -2, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 0, t1: -2, b0: 2, b1: 2 }],
    [{ t0: 5, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 0, t1: 5, b0: -5, b1: 0 }],
    [{ t0: -5, t1: 0, b0: 0, b1: 5 }],
    [{ t0: 0, t1: -5, b0: 0, b1: 3 }],
    [{ t0: -2, t1: 3, b0: -1, b1: 1 }],
    [{ t0: 2, t1: -3, b0: 2, b1: -5 }],
    [{ t0: 2, t1: 3, b0: 0.5, b1: -0.5 }],
    [{ t0: 3, t1: 2, b0: 3, b1: 3 }],
    [{ t0: 5.5, t1: 2.2, b0: -0.2, b1: 0.1 }],
    [{ t0: -2.2, t1: -5.5, b0: 0, b1: 0 }],
    [{ t0: 5.5, t1: -0.4, b0: 6, b1: -6.6 }],
    [{ t0: -0.4, t1: 5.5, b0: 5.5, b1: 1.1 }]
])
.test('copy (%#): matrix: %o',
    (m) =>
    {
        const result = SqMatrix.copy(m);
        expect(result).toBeDefined();
        expect(result).not.toBeNull();
        expect(result).not.toBe(m);
        expect(result.t0).toBe(m.t0);
        expect(result.t1).toBe(m.t1);
        expect(result.b0).toBe(m.b0);
        expect(result.b1).toBe(m.b1);
    }
);

each([
    [{ x: 0, y: 0 }, { x: 0, y: 0 }],
    [{ x: 1, y: 0 }, { x: 1, y: 0 }],
    [{ x: 0, y: 1 }, { x: 0, y: 1 }],
    [{ x: -1, y: 0 }, { x: 0, y: -1 }],
    [{ x: 0, y: -1 }, { x: 0, y: 1 }],
    [{ x: 2, y: 0 }, { x: 1, y: 0 }],
    [{ x: 0, y: 2 }, { x: 0, y: 1 }],
    [{ x: -2, y: 0 }, { x: 0, y: 0 }],
    [{ x: 0, y: -2 }, { x: 2, y: 2 }],
    [{ x: 5, y: 0 }, { x: 0, y: 0 }],
    [{ x: 0, y: 5 }, { x: -5, y: 0 }],
    [{ x: -5, y: 0 }, { x: 0, y: 5 }],
    [{ x: 0, y: -5 }, { x: 0, y: 3 }],
    [{ x: -2, y: 3 }, { x: -1, y: 1 }],
    [{ x: 2, y: -3 }, { x: 2, y: -5 }],
    [{ x: 2, y: 3 }, { x: 0.5, y: -0.5 }],
    [{ x: 3, y: 2 }, { x: 3, y: 3 }],
    [{ x: 5.5, y: 2.2 }, { x: -0.2, y: 0.1 }],
    [{ x: -2.2, y: -5.5 }, { x: 0, y: 0 }],
    [{ x: 5.5, y: -0.4 }, { x: 6, y: -6.6 }],
    [{ x: -0.4, y: 5.5 }, { x: 5.5, y: 1.1 }]
])
.test('from rows (%#): top: %o, bottom: %o',
    (v1, v2) =>
    {
        const result = SqMatrix.fromRows(v1, v2);
        expect(result).toBeDefined();
        expect(result).not.toBeNull();
        expect(result.t0).toBe(v1.x);
        expect(result.t1).toBe(v1.y);
        expect(result.b0).toBe(v2.x);
        expect(result.b1).toBe(v2.y);
    }
);

each([
    [{ x: 0, y: 0 }, { x: 0, y: 0 }],
    [{ x: 1, y: 0 }, { x: 1, y: 0 }],
    [{ x: 0, y: 1 }, { x: 0, y: 1 }],
    [{ x: -1, y: 0 }, { x: 0, y: -1 }],
    [{ x: 0, y: -1 }, { x: 0, y: 1 }],
    [{ x: 2, y: 0 }, { x: 1, y: 0 }],
    [{ x: 0, y: 2 }, { x: 0, y: 1 }],
    [{ x: -2, y: 0 }, { x: 0, y: 0 }],
    [{ x: 0, y: -2 }, { x: 2, y: 2 }],
    [{ x: 5, y: 0 }, { x: 0, y: 0 }],
    [{ x: 0, y: 5 }, { x: -5, y: 0 }],
    [{ x: -5, y: 0 }, { x: 0, y: 5 }],
    [{ x: 0, y: -5 }, { x: 0, y: 3 }],
    [{ x: -2, y: 3 }, { x: -1, y: 1 }],
    [{ x: 2, y: -3 }, { x: 2, y: -5 }],
    [{ x: 2, y: 3 }, { x: 0.5, y: -0.5 }],
    [{ x: 3, y: 2 }, { x: 3, y: 3 }],
    [{ x: 5.5, y: 2.2 }, { x: -0.2, y: 0.1 }],
    [{ x: -2.2, y: -5.5 }, { x: 0, y: 0 }],
    [{ x: 5.5, y: -0.4 }, { x: 6, y: -6.6 }],
    [{ x: -0.4, y: 5.5 }, { x: 5.5, y: 1.1 }]
])
.test('from cols (%#): left: %o, right: %o',
    (v1, v2) =>
    {
        const result = SqMatrix.fromCols(v1, v2);
        expect(result).toBeDefined();
        expect(result).not.toBeNull();
        expect(result.t0).toBe(v1.x);
        expect(result.t1).toBe(v2.x);
        expect(result.b0).toBe(v1.y);
        expect(result.b1).toBe(v2.y);
    }
);

test('identity',
    () =>
    {
        const result = SqMatrix.identity();
        expect(result).toBeDefined();
        expect(result).not.toBeNull();
        expect(result.t0).toBe(1);
        expect(result.t1).toBe(0);
        expect(result.b0).toBe(0);
        expect(result.b1).toBe(1);
    }
);

each([
    [{ t0: 0, t1: 0, b0: 0, b1: 0 }, { t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 1, t1: 0, b0: 1, b1: 0 }, { t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 0, t1: 1, b0: 0, b1: 1 }, { t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: -1, t1: 0, b0: 0, b1: -1 }, { t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 0, t1: -1, b0: 0, b1: 1 }, { t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 2, t1: 0, b0: 1, b1: 0 }, { t0: 2, t1: 0, b0: 1, b1: 0 }],
    [{ t0: 0, t1: 2, b0: 0, b1: 1 }, { t0: 0, t1: 2, b0: 0, b1: 1 }],
    [{ t0: -2, t1: 0, b0: 0, b1: 0 }, { t0: 5, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 0, t1: -2, b0: 2, b1: 2 }, { t0: 0, t1: -5, b0: 0, b1: 3 }],
    [{ t0: 5, t1: 0, b0: 0, b1: 0 }, { t0: 2, t1: -3, b0: 2, b1: -5 }],
    [{ t0: 0, t1: 5, b0: -5, b1: 0 }, { t0: 2, t1: 3, b0: 0.5, b1: -0.5 }],
    [{ t0: -5, t1: 0, b0: 0, b1: 5 }, { t0: 5.5, t1: 2.2, b0: -0.2, b1: 0.1 }],
    [{ t0: 0, t1: -5, b0: 0, b1: 3 }, { t0: 2, t1: -3, b0: 2, b1: -5 }],
    [{ t0: -2, t1: 3, b0: -1, b1: 1 }, { t0: -0.4, t1: 5.5, b0: 5.5, b1: 1.1 }],
    [{ t0: 2, t1: -3, b0: 2, b1: -5 }, { t0: 3, t1: 2, b0: 3, b1: 3 }],
    [{ t0: 2, t1: 3, b0: 0.5, b1: -0.5 }, { t0: 5.5, t1: -0.4, b0: 6, b1: -6.6 }],
    [{ t0: 3, t1: 2, b0: 3, b1: 3 }, { t0: -2, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 5.5, t1: 2.2, b0: -0.2, b1: 0.1 }, { t0: 0, t1: -2, b0: 2, b1: 2 }],
    [{ t0: -2.2, t1: -5.5, b0: 0, b1: 0 }, { t0: 0, t1: -1, b0: 0, b1: 1 }],
    [{ t0: 5.5, t1: -0.4, b0: 6, b1: -6.6 }, { t0: 2, t1: 3, b0: 0.5, b1: -0.5 }],
    [{ t0: -0.4, t1: 5.5, b0: 5.5, b1: 1.1 }, { t0: 0, t1: 5, b0: -5, b1: 0 }]
])
.test('assign (%#): matrix: %o, other: %o',
    (m1, m2) =>
    {
        const result = SqMatrix.assign(m1, m2);
        expect(result).toBe(m1);
        expect(result.t0).toBe(m2.t0);
        expect(result.t1).toBe(m2.t1);
        expect(result.b0).toBe(m2.b0);
        expect(result.b1).toBe(m2.b1);
    }
);

each([
    [{ t0: 0, t1: 0, b0: 0, b1: 0 }, 0],
    [{ t0: 1, t1: 0, b0: 1, b1: 0 }, 0],
    [{ t0: 0, t1: 1, b0: 0, b1: 1 }, 0],
    [{ t0: -1, t1: 0, b0: 0, b1: -1 }, 1],
    [{ t0: 0, t1: -1, b0: 0, b1: 1 }, 0],
    [{ t0: 2, t1: 0, b0: 1, b1: 0 }, 0],
    [{ t0: 0, t1: 2, b0: 0, b1: 1 }, 0],
    [{ t0: -2, t1: 0, b0: 0, b1: 0 }, 0],
    [{ t0: 0, t1: -2, b0: 2, b1: 2 }, 4],
    [{ t0: 5, t1: 0, b0: 0, b1: 0 }, 0],
    [{ t0: 0, t1: 5, b0: -5, b1: 0 }, 25],
    [{ t0: -5, t1: 0, b0: 0, b1: 5 }, -25],
    [{ t0: 0, t1: -5, b0: 0, b1: 3 }, 0],
    [{ t0: -2, t1: 3, b0: -1, b1: 1 }, 1],
    [{ t0: 2, t1: -3, b0: 2, b1: -5 }, -4],
    [{ t0: 2, t1: 3, b0: 0.5, b1: -0.5 }, -2.5],
    [{ t0: 3, t1: 2, b0: 3, b1: 3 }, 3],
    [{ t0: 5.5, t1: 2.2, b0: -0.2, b1: 0.1 }, 0.99],
    [{ t0: -2.2, t1: -5.5, b0: 0, b1: 0 }, 0],
    [{ t0: 5.5, t1: -0.4, b0: 6, b1: -6.6 }, -33.9],
    [{ t0: -0.4, t1: 5.5, b0: 5.5, b1: 1.1 }, -30.69]
])
.test('det (%#): matrix: %o, expected: %f',
    (m, expected) =>
    {
        expect(SqMatrix.det(m)).toBeCloseTo(expected, 8);
    }
);

each([
    [{ t0: 0, t1: 0, b0: 0, b1: 0 }, { t0: 0, t1: 0, b0: 0, b1: 0 }, { t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 1, t1: 0, b0: 1, b1: 0 }, { t0: 0, t1: 0, b0: 0, b1: 0 }, { t0: 1, t1: 0, b0: 1, b1: 0 }],
    [{ t0: 0, t1: 1, b0: 0, b1: 1 }, { t0: 0, t1: 0, b0: 0, b1: 0 }, { t0: 0, t1: 1, b0: 0, b1: 1 }],
    [{ t0: -1, t1: 0, b0: 0, b1: -1 }, { t0: 0, t1: 0, b0: 0, b1: 0 }, { t0: -1, t1: 0, b0: 0, b1: -1 }],
    [{ t0: 0, t1: -1, b0: 0, b1: 1 }, { t0: 0, t1: 0, b0: 0, b1: 0 }, { t0: 0, t1: -1, b0: 0, b1: 1 }],
    [{ t0: 2, t1: 0, b0: 1, b1: 0 }, { t0: 2, t1: 0, b0: 1, b1: 0 }, { t0: 4, t1: 0, b0: 2, b1: 0 }],
    [{ t0: 0, t1: 2, b0: 0, b1: 1 }, { t0: 0, t1: 2, b0: 0, b1: 1 }, { t0: 0, t1: 4, b0: 0, b1: 2 }],
    [{ t0: -2, t1: 0, b0: 0, b1: 0 }, { t0: 5, t1: 0, b0: 0, b1: 0 }, { t0: 3, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 0, t1: -2, b0: 2, b1: 2 }, { t0: 0, t1: -5, b0: 0, b1: 3 }, { t0: 0, t1: -7, b0: 2, b1: 5 }],
    [{ t0: 5, t1: 0, b0: 0, b1: 0 }, { t0: 2, t1: -3, b0: 2, b1: -5 }, { t0: 7, t1: -3, b0: 2, b1: -5 }],
    [{ t0: 0, t1: 5, b0: -5, b1: 0 }, { t0: 2, t1: 3, b0: 0.5, b1: -0.5 }, { t0: 2, t1: 8, b0: -4.5, b1: -0.5 }],
    [{ t0: -5, t1: 0, b0: 0, b1: 5 }, { t0: 5.5, t1: 2.2, b0: -0.2, b1: 0.1 }, { t0: 0.5, t1: 2.2, b0: -0.2, b1: 5.1 }],
    [{ t0: 0, t1: -5, b0: 0, b1: 3 }, { t0: 2, t1: -3, b0: 2, b1: -5 }, { t0: 2, t1: -8, b0: 2, b1: -2 }],
    [{ t0: -2, t1: 3, b0: -1, b1: 1 }, { t0: -0.4, t1: 5.5, b0: 5.5, b1: 1.1 }, { t0: -2.4, t1: 8.5, b0: 4.5, b1: 2.1 }],
    [{ t0: 2, t1: -3, b0: 2, b1: -5 }, { t0: 3, t1: 2, b0: 3, b1: 3 }, { t0: 5, t1: -1, b0: 5, b1: -2 }],
    [{ t0: 2, t1: 3, b0: 0.5, b1: -0.5 }, { t0: 5.5, t1: -0.4, b0: 6, b1: -6.6 }, { t0: 7.5, t1: 2.6, b0: 6.5, b1: -7.1 }],
    [{ t0: 3, t1: 2, b0: 3, b1: 3 }, { t0: -2, t1: 0, b0: 0, b1: 0 }, { t0: 1, t1: 2, b0: 3, b1: 3 }],
    [{ t0: 5.5, t1: 2.2, b0: -0.2, b1: 0.1 }, { t0: 0, t1: -2, b0: 2, b1: 2 }, { t0: 5.5, t1: 0.2, b0: 1.8, b1: 2.1 }],
    [{ t0: -2.2, t1: -5.5, b0: 0, b1: 0 }, { t0: 0, t1: -1, b0: 0, b1: 1 }, { t0: -2.2, t1: -6.5, b0: 0, b1: 1 }],
    [{ t0: 5.5, t1: -0.4, b0: 6, b1: -6.6 }, { t0: 2, t1: 3, b0: 0.5, b1: -0.5 }, { t0: 7.5, t1: 2.6, b0: 6.5, b1: -7.1 }],
    [{ t0: -0.4, t1: 5.5, b0: 5.5, b1: 1.1 }, { t0: 0, t1: 5, b0: -5, b1: 0 }, { t0: -0.4, t1: 10.5, b0: 0.5, b1: 1.1 }]
])
.test('add (%#): matrix: %o, other: %o, expected: %o',
    (m1, m2, expected) =>
    {
        const result = SqMatrix.add(m1, m2);
        expect(result).toBe(m1);
        expect(result.t0).toBeCloseTo(expected.t0, 8);
        expect(result.t1).toBeCloseTo(expected.t1, 8);
        expect(result.b0).toBeCloseTo(expected.b0, 8);
        expect(result.b1).toBeCloseTo(expected.b1, 8);
    }
);

each([
    [{ t0: 0, t1: 0, b0: 0, b1: 0 }, 0, { t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 1, t1: 0, b0: 1, b1: 0 }, 0, { t0: 1, t1: 0, b0: 1, b1: 0 }],
    [{ t0: 0, t1: 1, b0: 0, b1: 1 }, 0, { t0: 0, t1: 1, b0: 0, b1: 1 }],
    [{ t0: -1, t1: 0, b0: 0, b1: -1 }, 0, { t0: -1, t1: 0, b0: 0, b1: -1 }],
    [{ t0: 0, t1: -1, b0: 0, b1: 1 }, 0, { t0: 0, t1: -1, b0: 0, b1: 1 }],
    [{ t0: 2, t1: 0, b0: 1, b1: 0 }, 2, { t0: 4, t1: 2, b0: 3, b1: 2 }],
    [{ t0: 0, t1: 2, b0: 0, b1: 1 }, 1, { t0: 1, t1: 3, b0: 1, b1: 2 }],
    [{ t0: -2, t1: 0, b0: 0, b1: 0 }, 5, { t0: 3, t1: 5, b0: 5, b1: 5 }],
    [{ t0: 0, t1: -2, b0: 2, b1: 2 }, 3, { t0: 3, t1: 1, b0: 5, b1: 5 }],
    [{ t0: 5, t1: 0, b0: 0, b1: 0 }, -5, { t0: 0, t1: -5, b0: -5, b1: -5 }],
    [{ t0: 0, t1: 5, b0: -5, b1: 0 }, -3, { t0: -3, t1: 2, b0: -8, b1: -3 }],
    [{ t0: -5, t1: 0, b0: 0, b1: 5 }, 5.5, { t0: 0.5, t1: 5.5, b0: 5.5, b1: 10.5 }],
    [{ t0: 0, t1: -5, b0: 0, b1: 3 }, -5, { t0: -5, t1: -10, b0: -5, b1: -2 }],
    [{ t0: -2, t1: 3, b0: -1, b1: 1 }, -0.4, { t0: -2.4, t1: 2.6, b0: -1.4, b1: 0.6 }],
    [{ t0: 2, t1: -3, b0: 2, b1: -5 }, 3, { t0: 5, t1: 0, b0: 5, b1: -2 }],
    [{ t0: 2, t1: 3, b0: 0.5, b1: -0.5 }, -6.6, { t0: -4.6, t1: -3.6, b0: -6.1, b1: -7.1 }],
    [{ t0: 3, t1: 2, b0: 3, b1: 3 }, -2, { t0: 1, t1: 0, b0: 1, b1: 1 }],
    [{ t0: 5.5, t1: 2.2, b0: -0.2, b1: 0.1 }, 2, { t0: 7.5, t1: 4.2, b0: 1.8, b1: 2.1 }],
    [{ t0: -2.2, t1: -5.5, b0: 0, b1: 0 }, -1, { t0: -3.2, t1: -6.5, b0: -1, b1: -1 }],
    [{ t0: 5.5, t1: -0.4, b0: 6, b1: -6.6 }, 0.5, { t0: 6, t1: 0.1, b0: 6.5, b1: -6.1 }],
    [{ t0: -0.4, t1: 5.5, b0: 5.5, b1: 1.1 }, 5, { t0: 4.6, t1: 10.5, b0: 10.5, b1: 6.1 }]
])
.test('add scalar (%#): matrix: %o, scalar: %f, expected: %o',
    (m, scalar, expected) =>
    {
        const result = SqMatrix.addScalar(m, scalar);
        expect(result).toBe(m);
        expect(result.t0).toBeCloseTo(expected.t0, 8);
        expect(result.t1).toBeCloseTo(expected.t1, 8);
        expect(result.b0).toBeCloseTo(expected.b0, 8);
        expect(result.b1).toBeCloseTo(expected.b1, 8);
    }
);

each([
    [{ t0: 0, t1: 0, b0: 0, b1: 0 }, { t0: 0, t1: 0, b0: 0, b1: 0 }, { t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 1, t1: 0, b0: 1, b1: 0 }, { t0: 0, t1: 0, b0: 0, b1: 0 }, { t0: 1, t1: 0, b0: 1, b1: 0 }],
    [{ t0: 0, t1: 1, b0: 0, b1: 1 }, { t0: 0, t1: 0, b0: 0, b1: 0 }, { t0: 0, t1: 1, b0: 0, b1: 1 }],
    [{ t0: -1, t1: 0, b0: 0, b1: -1 }, { t0: 0, t1: 0, b0: 0, b1: 0 }, { t0: -1, t1: 0, b0: 0, b1: -1 }],
    [{ t0: 0, t1: -1, b0: 0, b1: 1 }, { t0: 0, t1: 0, b0: 0, b1: 0 }, { t0: 0, t1: -1, b0: 0, b1: 1 }],
    [{ t0: 2, t1: 0, b0: 1, b1: 0 }, { t0: 2, t1: 0, b0: 1, b1: 0 }, { t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 0, t1: 2, b0: 0, b1: 1 }, { t0: 0, t1: 2, b0: 0, b1: 1 }, { t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: -2, t1: 0, b0: 0, b1: 0 }, { t0: 5, t1: 0, b0: 0, b1: 0 }, { t0: -7, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 0, t1: -2, b0: 2, b1: 2 }, { t0: 0, t1: -5, b0: 0, b1: 3 }, { t0: 0, t1: 3, b0: 2, b1: -1 }],
    [{ t0: 5, t1: 0, b0: 0, b1: 0 }, { t0: 2, t1: -3, b0: 2, b1: -5 }, { t0: 3, t1: 3, b0: -2, b1: 5 }],
    [{ t0: 0, t1: 5, b0: -5, b1: 0 }, { t0: 2, t1: 3, b0: 0.5, b1: -0.5 }, { t0: -2, t1: 2, b0: -5.5, b1: 0.5 }],
    [{ t0: -5, t1: 0, b0: 0, b1: 5 }, { t0: 5.5, t1: 2.2, b0: -0.2, b1: 0.1 }, { t0: -10.5, t1: -2.2, b0: 0.2, b1: 4.9 }],
    [{ t0: 0, t1: -5, b0: 0, b1: 3 }, { t0: 2, t1: -3, b0: 2, b1: -5 }, { t0: -2, t1: -2, b0: -2, b1: 8 }],
    [{ t0: -2, t1: 3, b0: -1, b1: 1 }, { t0: -0.4, t1: 5.5, b0: 5.5, b1: 1.1 }, { t0: -1.6, t1: -2.5, b0: -6.5, b1: -0.1 }],
    [{ t0: 2, t1: -3, b0: 2, b1: -5 }, { t0: 3, t1: 2, b0: 3, b1: 3 }, { t0: -1, t1: -5, b0: -1, b1: -8 }],
    [{ t0: 2, t1: 3, b0: 0.5, b1: -0.5 }, { t0: 5.5, t1: -0.4, b0: 6, b1: -6.6 }, { t0: -3.5, t1: 3.4, b0: -5.5, b1: 6.1 }],
    [{ t0: 3, t1: 2, b0: 3, b1: 3 }, { t0: -2, t1: 0, b0: 0, b1: 0 }, { t0: 5, t1: 2, b0: 3, b1: 3 }],
    [{ t0: 5.5, t1: 2.2, b0: -0.2, b1: 0.1 }, { t0: 0, t1: -2, b0: 2, b1: 2 }, { t0: 5.5, t1: 4.2, b0: -2.2, b1: -1.9 }],
    [{ t0: -2.2, t1: -5.5, b0: 0, b1: 0 }, { t0: 0, t1: -1, b0: 0, b1: 1 }, { t0: -2.2, t1: -4.5, b0: 0, b1: -1 }],
    [{ t0: 5.5, t1: -0.4, b0: 6, b1: -6.6 }, { t0: 2, t1: 3, b0: 0.5, b1: -0.5 }, { t0: 3.5, t1: -3.4, b0: 5.5, b1: -6.1 }],
    [{ t0: -0.4, t1: 5.5, b0: 5.5, b1: 1.1 }, { t0: 0, t1: 5, b0: -5, b1: 0 }, { t0: -0.4, t1: 0.5, b0: 10.5, b1: 1.1 }]
])
.test('sub (%#): matrix: %o, other: %o, expected: %o',
    (m1, m2, expected) =>
    {
        const result = SqMatrix.sub(m1, m2);
        expect(result).toBe(m1);
        expect(result.t0).toBeCloseTo(expected.t0, 8);
        expect(result.t1).toBeCloseTo(expected.t1, 8);
        expect(result.b0).toBeCloseTo(expected.b0, 8);
        expect(result.b1).toBeCloseTo(expected.b1, 8);
    }
);

each([
    [{ t0: 0, t1: 0, b0: 0, b1: 0 }, 0, { t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 1, t1: 0, b0: 1, b1: 0 }, 0, { t0: 1, t1: 0, b0: 1, b1: 0 }],
    [{ t0: 0, t1: 1, b0: 0, b1: 1 }, 0, { t0: 0, t1: 1, b0: 0, b1: 1 }],
    [{ t0: -1, t1: 0, b0: 0, b1: -1 }, 0, { t0: -1, t1: 0, b0: 0, b1: -1 }],
    [{ t0: 0, t1: -1, b0: 0, b1: 1 }, 0, { t0: 0, t1: -1, b0: 0, b1: 1 }],
    [{ t0: 2, t1: 0, b0: 1, b1: 0 }, 2, { t0: 0, t1: -2, b0: -1, b1: -2 }],
    [{ t0: 0, t1: 2, b0: 0, b1: 1 }, 1, { t0: -1, t1: 1, b0: -1, b1: 0 }],
    [{ t0: -2, t1: 0, b0: 0, b1: 0 }, 5, { t0: -7, t1: -5, b0: -5, b1: -5 }],
    [{ t0: 0, t1: -2, b0: 2, b1: 2 }, 3, { t0: -3, t1: -5, b0: -1, b1: -1 }],
    [{ t0: 5, t1: 0, b0: 0, b1: 0 }, -5, { t0: 10, t1: 5, b0: 5, b1: 5 }],
    [{ t0: 0, t1: 5, b0: -5, b1: 0 }, -3, { t0: 3, t1: 8, b0: -2, b1: 3 }],
    [{ t0: -5, t1: 0, b0: 0, b1: 5 }, 5.5, { t0: -10.5, t1: -5.5, b0: -5.5, b1: -0.5 }],
    [{ t0: 0, t1: -5, b0: 0, b1: 3 }, -5, { t0: 5, t1: 0, b0: 5, b1: 8 }],
    [{ t0: -2, t1: 3, b0: -1, b1: 1 }, -0.4, { t0: -1.6, t1: 3.4, b0: -0.6, b1: 1.4 }],
    [{ t0: 2, t1: -3, b0: 2, b1: -5 }, 3, { t0: -1, t1: -6, b0: -1, b1: -8 }],
    [{ t0: 2, t1: 3, b0: 0.5, b1: -0.5 }, -6.6, { t0: 8.6, t1: 9.6, b0: 7.1, b1: 6.1 }],
    [{ t0: 3, t1: 2, b0: 3, b1: 3 }, -2, { t0: 5, t1: 4, b0: 5, b1: 5 }],
    [{ t0: 5.5, t1: 2.2, b0: -0.2, b1: 0.1 }, 2, { t0: 3.5, t1: 0.2, b0: -2.2, b1: -1.9 }],
    [{ t0: -2.2, t1: -5.5, b0: 0, b1: 0 }, -1, { t0: -1.2, t1: -4.5, b0: 1, b1: 1 }],
    [{ t0: 5.5, t1: -0.4, b0: 6, b1: -6.6 }, 0.5, { t0: 5, t1: -0.9, b0: 5.5, b1: -7.1 }],
    [{ t0: -0.4, t1: 5.5, b0: 5.5, b1: 1.1 }, 5, { t0: -5.4, t1: 0.5, b0: 0.5, b1: -3.9 }]
])
.test('sub scalar (%#): matrix: %o, scalar: %f, expected: %o',
    (m, scalar, expected) =>
    {
        const result = SqMatrix.subScalar(m, scalar);
        expect(result).toBe(m);
        expect(result.t0).toBeCloseTo(expected.t0, 8);
        expect(result.t1).toBeCloseTo(expected.t1, 8);
        expect(result.b0).toBeCloseTo(expected.b0, 8);
        expect(result.b1).toBeCloseTo(expected.b1, 8);
    }
);

each([
    [{ t0: 0, t1: 0, b0: 0, b1: 0 }, 0, { t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 1, t1: 0, b0: 1, b1: 0 }, 0, { t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 0, t1: 1, b0: 0, b1: 1 }, 0, { t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: -1, t1: 0, b0: 0, b1: -1 }, 0, { t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 0, t1: -1, b0: 0, b1: 1 }, 0, { t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 2, t1: 0, b0: 1, b1: 0 }, 2, { t0: 4, t1: 0, b0: 2, b1: 0 }],
    [{ t0: 0, t1: 2, b0: 0, b1: 1 }, 1, { t0: 0, t1: 2, b0: 0, b1: 1 }],
    [{ t0: -2, t1: 0, b0: 0, b1: 0 }, 5, { t0: -10, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 0, t1: -2, b0: 2, b1: 2 }, 3, { t0: 0, t1: -6, b0: 6, b1: 6 }],
    [{ t0: 5, t1: 0, b0: 0, b1: 0 }, -5, { t0: -25, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 0, t1: 5, b0: -5, b1: 0 }, -3, { t0: 0, t1: -15, b0: 15, b1: 0 }],
    [{ t0: -5, t1: 0, b0: 0, b1: 5 }, 5.5, { t0: -27.5, t1: 0, b0: 0, b1: 27.5 }],
    [{ t0: 0, t1: -5, b0: 0, b1: 3 }, -5, { t0: 0, t1: 25, b0: 0, b1: -15 }],
    [{ t0: -2, t1: 3, b0: -1, b1: 1 }, -0.4, { t0: 0.8, t1: -1.2, b0: 0.4, b1: -0.4 }],
    [{ t0: 2, t1: -3, b0: 2, b1: -5 }, 3, { t0: 6, t1: -9, b0: 6, b1: -15 }],
    [{ t0: 2, t1: 3, b0: 0.5, b1: -0.5 }, -6.6, { t0: -13.2, t1: -19.8, b0: -3.3, b1: 3.3 }],
    [{ t0: 3, t1: 2, b0: 3, b1: 3 }, -2, { t0: -6, t1: -4, b0: -6, b1: -6 }],
    [{ t0: 5.5, t1: 2.2, b0: -0.2, b1: 0.1 }, 2, { t0: 11, t1: 4.4, b0: -0.4, b1: 0.2 }],
    [{ t0: -2.2, t1: -5.5, b0: 0, b1: 0 }, -1, { t0: 2.2, t1: 5.5, b0: 0, b1: 0 }],
    [{ t0: 5.5, t1: -0.4, b0: 6, b1: -6.6 }, 0.5, { t0: 2.75, t1: -0.2, b0: 3, b1: -3.3 }],
    [{ t0: -0.4, t1: 5.5, b0: 5.5, b1: 1.1 }, 5, { t0: -2, t1: 27.5, b0: 27.5, b1: 5.5 }]
])
.test('scale (%#): matrix: %o, scalar: %f, expected: %o',
    (m, scalar, expected) =>
    {
        const result = SqMatrix.scale(m, scalar);
        expect(result).toBe(m);
        expect(result.t0).toBeCloseTo(expected.t0, 8);
        expect(result.t1).toBeCloseTo(expected.t1, 8);
        expect(result.b0).toBeCloseTo(expected.b0, 8);
        expect(result.b1).toBeCloseTo(expected.b1, 8);
    }
);

each([
    [{ t0: 0, t1: 0, b0: 0, b1: 0 }, null],
    [{ t0: 1, t1: 0, b0: 1, b1: 0 }, null],
    [{ t0: 0, t1: 1, b0: 0, b1: 1 }, null],
    [{ t0: -1, t1: 0, b0: 0, b1: -1 }, { t0: -1, t1: 0, b0: 0, b1: -1 }],
    [{ t0: 0, t1: -1, b0: 0, b1: 1 }, null],
    [{ t0: 2, t1: 0, b0: 1, b1: 0 }, null],
    [{ t0: 0, t1: 2, b0: 0, b1: 1 }, null],
    [{ t0: -2, t1: 0, b0: 0, b1: 0 }, null],
    [{ t0: 0, t1: -2, b0: 2, b1: 2 }, { t0: 0.5, t1: 0.5, b0: -0.5, b1: 0 }],
    [{ t0: 5, t1: 0, b0: 0, b1: 0 }, null],
    [{ t0: 0, t1: 5, b0: -5, b1: 0 }, { t0: 0, t1: -0.2, b0: 0.2, b1: 0 }],
    [{ t0: -5, t1: 0, b0: 0, b1: 5 }, { t0: -0.2, t1: 0, b0: 0, b1: 0.2 }],
    [{ t0: 0, t1: -5, b0: 0, b1: 3 }, null],
    [{ t0: -2, t1: 3, b0: -1, b1: 1 }, { t0: 1, t1: -3, b0: 1, b1: -2 }],
    [{ t0: 2, t1: -3, b0: 2, b1: -5 }, { t0: 1.25, t1: -0.75, b0: 0.5, b1: -0.5 }],
    [{ t0: 2, t1: 3, b0: 0.5, b1: -0.5 }, { t0: 0.2, t1: 1.2, b0: 0.2, b1: -0.8 }],
    [{ t0: 3, t1: 2, b0: 3, b1: 3 }, { t0: 1, t1: -0.666666666, b0: -1, b1: 1 }],
    [{ t0: 5.5, t1: 2.2, b0: -0.2, b1: 0.1 }, { t0: 0.101010101, t1: -2.222222222, b0: 0.202020202, b1: 5.555555555 }],
    [{ t0: -2.2, t1: -5.5, b0: 0, b1: 0 }, null],
    [{ t0: 5.5, t1: -0.4, b0: 6, b1: -6.6 }, { t0: 0.194690265, t1: -0.01179941, b0: 0.17699115, b1: -0.162241887 }],
    [{ t0: -0.4, t1: 5.5, b0: 5.5, b1: 1.1 }, { t0: -0.035842293, t1: 0.179211469, b0: 0.179211469, b1: 0.013033561 }]
])
.test('invert (%#): matrix: %o, expected: %o',
    (m, expected) =>
    {
        const result = SqMatrix.invert(m);
        if (expected === null)
            expect(result).toBeNull();
        else
        {
            expect(result).toBe(m);
            expect(result!.t0).toBeCloseTo(expected.t0, 8);
            expect(result!.t1).toBeCloseTo(expected.t1, 8);
            expect(result!.b0).toBeCloseTo(expected.b0, 8);
            expect(result!.b1).toBeCloseTo(expected.b1, 8);
        }
    }
);

each([
    [{ t0: 0, t1: 0, b0: 0, b1: 0 }, { t0: 0, t1: 0, b0: 0, b1: 0 }, { t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 1, t1: 0, b0: 1, b1: 0 }, { t0: 0, t1: 0, b0: 0, b1: 0 }, { t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 0, t1: 1, b0: 0, b1: 1 }, { t0: 0, t1: 0, b0: 0, b1: 0 }, { t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: -1, t1: 0, b0: 0, b1: -1 }, { t0: 0, t1: 0, b0: 0, b1: 0 }, { t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 0, t1: -1, b0: 0, b1: 1 }, { t0: 0, t1: 0, b0: 0, b1: 0 }, { t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 2, t1: 0, b0: 1, b1: 0 }, { t0: 2, t1: 0, b0: 1, b1: 0 }, { t0: 4, t1: 0, b0: 2, b1: 0 }],
    [{ t0: 0, t1: 2, b0: 0, b1: 1 }, { t0: 0, t1: 2, b0: 0, b1: 1 }, { t0: 0, t1: 2, b0: 0, b1: 1 }],
    [{ t0: -2, t1: 0, b0: 0, b1: 0 }, { t0: 5, t1: 0, b0: 0, b1: 0 }, { t0: -10, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 0, t1: -2, b0: 2, b1: 2 }, { t0: 0, t1: -5, b0: 0, b1: 3 }, { t0: 0, t1: -6, b0: 0, b1: -4 }],
    [{ t0: 5, t1: 0, b0: 0, b1: 0 }, { t0: 2, t1: -3, b0: 2, b1: -5 }, { t0: 10, t1: -15, b0: 0, b1: 0 }],
    [{ t0: 0, t1: 5, b0: -5, b1: 0 }, { t0: 2, t1: 3, b0: 0.5, b1: -0.5 }, { t0: 2.5, t1: -2.5, b0: -10, b1: -15 }],
    [{ t0: -5, t1: 0, b0: 0, b1: 5 }, { t0: 5.5, t1: 2.2, b0: -0.2, b1: 0.1 }, { t0: -27.5, t1: -11, b0: -1, b1: 0.5 }],
    [{ t0: 0, t1: -5, b0: 0, b1: 3 }, { t0: 2, t1: -3, b0: 2, b1: -5 }, { t0: -10, t1: 25, b0: 6, b1: -15 }],
    [{ t0: -2, t1: 3, b0: -1, b1: 1 }, { t0: -0.4, t1: 5.5, b0: 5.5, b1: 1.1 }, { t0: 17.3, t1: -7.7, b0: 5.9, b1: -4.4 }],
    [{ t0: 2, t1: -3, b0: 2, b1: -5 }, { t0: 3, t1: 2, b0: 3, b1: 3 }, { t0: -3, t1: -5, b0: -9, b1: -11 }],
    [{ t0: 2, t1: 3, b0: 0.5, b1: -0.5 }, { t0: 5.5, t1: -0.4, b0: 6, b1: -6.6 }, { t0: 29, t1: -20.6, b0: -0.25, b1: 3.1 }],
    [{ t0: 3, t1: 2, b0: 3, b1: 3 }, { t0: -2, t1: 0, b0: 0, b1: 0 }, { t0: -6, t1: 0, b0: -6, b1: 0 }],
    [{ t0: 5.5, t1: 2.2, b0: -0.2, b1: 0.1 }, { t0: 0, t1: -2, b0: 2, b1: 2 }, { t0: 4.4, t1: -6.6, b0: 0.2, b1: 0.6 }],
    [{ t0: -2.2, t1: -5.5, b0: 0, b1: 0 }, { t0: 0, t1: -1, b0: 0, b1: 1 }, { t0: 0, t1: -3.3, b0: 0, b1: 0 }],
    [{ t0: 5.5, t1: -0.4, b0: 6, b1: -6.6 }, { t0: 2, t1: 3, b0: 0.5, b1: -0.5 }, { t0: 10.8, t1: 16.7, b0: 8.7, b1: 21.3 }],
    [{ t0: -0.4, t1: 5.5, b0: 5.5, b1: 1.1 }, { t0: 0, t1: 5, b0: -5, b1: 0 }, { t0: -27.5, t1: -2, b0: -5.5, b1: 27.5 }]
])
.test('mult (%#): matrix: %o, other: %o, expected: %o',
    (m1, m2, expected) =>
    {
        const result = SqMatrix.mult(m1, m2);
        expect(result).toBe(m1);
        expect(result.t0).toBeCloseTo(expected.t0, 8);
        expect(result.t1).toBeCloseTo(expected.t1, 8);
        expect(result.b0).toBeCloseTo(expected.b0, 8);
        expect(result.b1).toBeCloseTo(expected.b1, 8);
    }
);

each([
    [{ t0: 0, t1: 0, b0: 0, b1: 0 }, { x: 0, y: 0 }, { x: 0, y: 0 }],
    [{ t0: 1, t1: 0, b0: 1, b1: 0 }, { x: 0, y: 0 }, { x: 0, y: 0 }],
    [{ t0: 0, t1: 1, b0: 0, b1: 1 }, { x: 0, y: 0 }, { x: 0, y: 0 }],
    [{ t0: -1, t1: 0, b0: 0, b1: -1 }, { x: 0, y: 0 }, { x: 0, y: 0 }],
    [{ t0: 0, t1: -1, b0: 0, b1: 1 }, { x: 0, y: 0 }, { x: 0, y: 0 }],
    [{ t0: 2, t1: 0, b0: 1, b1: 0 }, { x: -2, y: 0 }, { x: -4, y: -2 }],
    [{ t0: 0, t1: 2, b0: 0, b1: 1 }, { x: 0, y: 5 }, { x: 10, y: 5 }],
    [{ t0: -2, t1: 0, b0: 0, b1: 0 }, { x: 0, y: -1 }, { x: 0, y: 0 }],
    [{ t0: 0, t1: -2, b0: 2, b1: 2 }, { x: 0, y: -2 }, { x: 4, y: -4 }],
    [{ t0: 5, t1: 0, b0: 0, b1: 0 }, { x: 0, y: -5 }, { x: 0, y: 0 }],
    [{ t0: 0, t1: 5, b0: -5, b1: 0 }, { x: 1, y: 0 }, { x: 0, y: -5 }],
    [{ t0: -5, t1: 0, b0: 0, b1: 5 }, { x: -0.4, y: 5.5 }, { x: 2, y: 27.5 }],
    [{ t0: 0, t1: -5, b0: 0, b1: 3 }, { x: 0, y: -5 }, { x: 25, y: -15 }],
    [{ t0: -2, t1: 3, b0: -1, b1: 1 }, { x: 5.5, y: -0.4 }, { x: -12.2, y: -5.9 }],
    [{ t0: 2, t1: -3, b0: 2, b1: -5 }, { x: 2, y: -3 }, { x: 13, y: 19 }],
    [{ t0: 2, t1: 3, b0: 0.5, b1: -0.5 }, { x: 5.5, y: 2.2 }, { x: 17.6, y: 1.65 }],
    [{ t0: 3, t1: 2, b0: 3, b1: 3 }, { x: 5, y: 0 }, { x: 15, y: 15 }],
    [{ t0: 5.5, t1: 2.2, b0: -0.2, b1: 0.1 }, { x: 1, y: 0 }, { x: 5.5, y: -0.2 }],
    [{ t0: -2.2, t1: -5.5, b0: 0, b1: 0 }, { x: 0, y: 1 }, { x: -5.5, y: 0 }],
    [{ t0: 5.5, t1: -0.4, b0: 6, b1: -6.6 }, { x: 1, y: 1 }, { x: 5.1, y: -0.6 }],
    [{ t0: -0.4, t1: 5.5, b0: 5.5, b1: 1.1 }, { x: -2.2, y: -5.5 }, { x: -29.37, y: -18.15 }]
])
.test('mult vec (%#): matrix: %o, vector: %o, expected: %o',
    (m, v, expected) =>
    {
        const result = SqMatrix.multVec(m, v);
        expect(result).toBeDefined();
        expect(result).not.toBeNull();
        expect(result.x).toBeCloseTo(expected.x, 8);
        expect(result.y).toBeCloseTo(expected.y, 8);
    }
);

each([
    [{ t0: 0, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 1, t1: 0, b0: 1, b1: 0 }],
    [{ t0: 0, t1: 1, b0: 0, b1: 1 }],
    [{ t0: -1, t1: 0, b0: 0, b1: -1 }],
    [{ t0: 0, t1: -1, b0: 0, b1: 1 }],
    [{ t0: 2, t1: 0, b0: 1, b1: 0 }],
    [{ t0: 0, t1: 2, b0: 0, b1: 1 }],
    [{ t0: -2, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 0, t1: -2, b0: 2, b1: 2 }],
    [{ t0: 5, t1: 0, b0: 0, b1: 0 }],
    [{ t0: 0, t1: 5, b0: -5, b1: 0 }],
    [{ t0: -5, t1: 0, b0: 0, b1: 5 }],
    [{ t0: 0, t1: -5, b0: 0, b1: 3 }],
    [{ t0: -2, t1: 3, b0: -1, b1: 1 }],
    [{ t0: 2, t1: -3, b0: 2, b1: -5 }],
    [{ t0: 2, t1: 3, b0: 0.5, b1: -0.5 }],
    [{ t0: 3, t1: 2, b0: 3, b1: 3 }],
    [{ t0: 5.5, t1: 2.2, b0: -0.2, b1: 0.1 }],
    [{ t0: -2.2, t1: -5.5, b0: 0, b1: 0 }],
    [{ t0: 5.5, t1: -0.4, b0: 6, b1: -6.6 }],
    [{ t0: -0.4, t1: 5.5, b0: 5.5, b1: 1.1 }]
])
.test('transpose (%#): matrix: %o, expected: %o',
    (m) =>
    {
        const t0: number = m.t0;
        const t1: number = m.t1;
        const b0: number = m.b0;
        const b1: number = m.b1;
        const result = SqMatrix.transpose(m);
        expect(result).toBe(m);
        expect(result.t0).toBe(t0);
        expect(result.t1).toBe(b0);
        expect(result.b0).toBe(t1);
        expect(result.b1).toBe(b1);
    }
);
